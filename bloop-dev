#!/bin/bash


ROOT_DIR=$(dirname $0)
PYTHON_ENV=$ROOT_DIR/.env
PYBIN=$PYTHON_ENV/bin
PRE_COMMIT=$PYBIN/pre-commit
PYTHON=$PYBIN/python

pickle_rick() {
    cat <<'EOF'
        ___
    . -^   `--,               *   )    )
   /# =========`-_          ` )  /( ( /( (        (
  /# (--====___====\         ( )(_)))\()))\  (    )\  (
 /#   .- --.  . --.|        (_(_())((_)\((_) )\  ((_) )\
/##   |  * ) (   * ),       |_   _|| |(_)(_)((_)  (_)((_)
|##   \    /\ \   / |         | |  | ' \ | |(_-<  | |(_-<
|###   ---   \ ---  |         |_|  |_||_||_|/_(/  |_|/__/
|####      ___)    #|        (  (             )\ )
|######           ##|        )\))(  (    (   (()/(
 \##### ---------- /        ((_))\  )\   )\   ((_))
  \####           (          (()(_)((_) ((_)  _| |
   `\###          |         / _` |/ _ \/ _ \/ _` |   _  _  _
     \###         |         \__, |\___/\___/\__,_|  (_)(_)(_)
      \##        |          |___/
       \###.    .)
        `======/
EOF
}


if [ $# -eq 0 ]; then
    echo "Usage $0 {clean, build, cross, setup, lint, autocode}"
    exit 1
fi

STUB_BUS=$(awk '{ if ($4 ~ /stub/) { print substr($1,5) }}' <(i2cdetect -l))

if [ -z ${STUB_BUS} ]; then
  ARGS="-DCMAKE_EXPORT_COMPILE_COMMANDS=1"
else
  ARGS="-DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DSTUB_BUS=${STUB_BUS}"
fi

if [ "$1" == "build" ]; then
    $0 clean
    mkdir build && cd build
    if [ "$2" == "test" ]; then
        cmake ${ARGS} -DDEV=ON -Wno-dev ..
    else
        cmake ${ARGS} ..
    fi

    if [ $? -ne 0 ]; then
        echo "Awwwww geeeeez rick, CMake failed"
        exit 1
    fi

    make

    if [ $? -ne 0 ]; then
        echo "Awwwww geeeeez rick, Make failed"
        exit 1
    fi

    pickle_rick

elif [ "$1" == "cross" ]; then
    $0 clean
    mkdir build && cd build
    if [ $(uname -m) == "aarch64" ]; then

      if [ ! -d /opt/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf ]; then
  	wget -c \
      https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf.tar.xz \
      -P /tmp/
  	if [ $? -ne 0 ]; then
  		echo "Failure to get arm-linux-gnueabihf"
  	fi
  	sudo tar xf /tmp/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf.tar.xz -C /opt/

  	rm /tmp/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf.tar.xz
      fi
      toolchain='./toolchains/beaglebone_aarch64.cmake'

    elif [ $(uname -m) == "x86_64" ]; then

      if [ ! -d /opt/gcc-linaro-6.5.0-2018.12-x86_64_arm-linux-gnueabihf ]; then
  	wget -c \
      https://releases.linaro.org/components/toolchain/binaries/6.5-2018.12/arm-linux-gnueabihf/gcc-linaro-6.5.0-2018.12-x86_64_arm-linux-gnueabihf.tar.xz \
      -P /tmp/
  	if [ $? -ne 0 ]; then
  		echo "Failure to get arm-linux-gnueabihf"
  	fi
  	sudo tar xf /tmp/gcc-linaro-6.5.0-2018.12-x86_64_arm-linux-gnueabihf.tar.xz -C /opt/

  	rm /tmp/gcc-linaro-6.5.0-2018.12-x86_64_arm-linux-gnueabihf.tar.xz
      fi
      toolchain='./toolchains/beaglebone.cmake'
    fi

    if [ "$2" == "test" ]; then
        cmake ${ARGS} -DCMAKE_TOOLCHAIN_FILE=$toolchain -DDEV=ON -Wno-dev ..
    else
        cmake ${ARGS} -DCMAKE_TOOLCHAIN_FILE=$toolchain ..
    fi

    if [ $? -ne 0 ]; then
        echo "Awwwww geeeeez rick, CMake failed"
        exit 1
    fi

    make

    if [ $? -ne 0 ]; then
        echo "Awwwww geeeeez rick, Make failed"
        exit 1
    fi

    pickle_rick

elif [ "$1" == "clean" ]; then
	rm -rf build
	rm -rf out
	rm -rf coverage
	echo "clean finished"

elif [ "$1" == "setup" ]; then
    sudo apt update
    sudo apt install \
        python3 \
        virtualenv \
        clang-format \
        cppcheck

    virtualenv -p python3 $PYTHON_ENV

    $PYBIN/pip install pre-commit

    $PRE_COMMIT install

    git submodule update --init --recursive


elif [ "$1" == "lint" ]; then
    $PRE_COMMIT run -a

elif [ "$1" == "autocode" ]; then
    $PYTHON $ROOT_DIR/autocoding/autocode.py

elif [ "$1" == "test" ]; then
    $0 clean
    echo "NOT YET IMPLEMENTED"
fi
