#!/bin/bash

ROOT_DIR=$(dirname $0)
PYTHON_ENV=$ROOT_DIR/.env
PYBIN=$PYTHON_ENV/bin
PRE_COMMIT=$PYBIN/pre-commit
PYTHON=$PYBIN/python

ARGS="-DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DBUILD_GMOCK=OFF"

prep() {
  ./btf/i2cinit.sh && ./btf/caninit.sh && ./btf/gpioinit.sh 2> /dev/null
  STUB_BUS=$(i2cdetect -l | awk '{ if ($4 ~ /stub/) { print substr($1,5) }}' 2> /dev/null)
  [ -z ${STUB_BUS} ] || ARGS="$ARGS -DSTUB_BUS=${STUB_BUS}"
}

#credit: https://emojicombos.com/rick-and-morty-ascii-art
pickle_rick() {
echo -e '\033[32m⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⡤⣠⣤⣴⡾⠛⠛⠛⠛⠛⠋⠙⠛⠛⠻⣿⣿⣶⣤⡀
⠀⠀⠀⠀⠀⠀⠘⢟⠒⠒⠦⢴⡿⣿⠟⢳⠀⠉⠢⡦⣤⠶⠶⢿⣿⣿⣿⣶⣄⠀⠙⠟⠉⠛⢿⣦⡀
⠀⠀⠀⠀⠀⠀⠀⠈⢧⠀⠀⠀⠙⠳⣾⣿⠇⠀⠀⠘⣿⡄⡷⣶⣶⣤⣄⣭⣿⣷⣦⣀⠀⠀⠀⠻⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⣸⠀⠀⠀⠀⠀⠈⠋⠀⠀⠀⠀⠘⡿⠁⢫⠉⠻⢿⣿⣉⠛⢿⣿⣦⣀⡀⠀⠛⢿⣷⣤⡀
⢀⣠⠤⠤⠀⠠⠤⢴⣻⠀⠀⠀⢀⡠⠤⠒⠒⠒⠢⣄⠀⠁⠀⢸⠀⠀⠀⠀⠹⣷⡈⢻⣿⢿⣿⣦⣀⣀⢹⡝⢿⣦⡀
⠀⠉⠓⢄⠀⠀⠀⠀⠀⠀⣠⠞⠁⣀⡠⠤⠐⠒⠒⠚⢷⡄⠀⢸⡀⣀⣠⣆⣀⣈⡉⠀⠙⣷⣍⠻⣿⣿⠀⠙⠈⠻⣿⣦⡀
⠀⠀⠀⠀⣷⡄⠀⠀⠀⢰⠁⡴⢊⡡⠔⠒⠉⠉⠉⢉⡩⠼⣆⠀⠉⠀⢰⠙⢿⣿⣿⣄⠀⠻⣿⣷⡈⢻⣷⡀⢀⠀⢸⣿⣧
⠀⠀⠀⢸⣿⣿⡀⠀⢠⡇⠈⠋⣡⠤⠀⠤⣄⠀⡴⠉⠀⠀⠀⠱⡄⢀⡏⠀⠸⡾⢿⣿⡇⠀⢸⣧⡁⠸⣯⠳⣿⠃⠀⣻⣿
⠲⣦⠒⠛⠛⠋⠀⠀⢸⠁⠀⡜⠁⠀⡀⠀⠈⡦⡇⠀⠐⠋⠀⢀⣇⣼⣀⣴⠀⠀⢠⣿⡥⠄⠀⠛⠿⠦⢜⣧⠙⢦⠈⣿⣿
⠀⠈⢳⣄⡀⠀⠀⠀⢸⡀⠀⡇⠀⠀⠃⠀⠀⡇⠑⢤⣀⣀⡤⣾⠀⠀⢀⠇⢀⠴⠊⠁⠀⣀⣀⣀⣀⠀⠀⠈⠑⢼⣀⣿⣿⡄
⠀⠀⠀⣿⣿⡶⠤⠀⠀⡇⠀⢘⠢⠤⠤⣴⠊⠀⡄⠹⡄⠒⠚⠹⠉⢦⠎⣰⠃⢀⠴⢚⣛⡓⠠⠄⠀⠈⠑⠢⢄⠀⠑⢿⣿⡇
⠀⠀⣸⣟⡁⠀⠀⠀⢠⢷⠀⠀⠉⠉⠉⠁⠀⠀⠘⠦⠇⠀⠀⠀⡧⠋⡴⠁⡴⢡⠞⠁⠀⠈⠳⡄⠀⠀⠀⠒⠤⣑⡄⠘⣿⠁
⠀⠀⢹⣷⣮⡙⠢⡄⢣⡈⡆⠀⠀⡄⣀⣠⡤⠄⠀⠠⠤⣀⢠⠐⡇⠐⡅⡜⠀⢸⠀⠀⠒⠀⠀⡅⢠⠖⠉⠉⠙⢮⠹⡀⢿
⠀⠀⠈⣿⣿⡇⡴⠁⠀⣉⣻⣄⠀⠫⠹⠞⠁⠀⠀⠀⠀⠠⠋⢰⠃⡠⢻⠁⠀⠈⠳⠤⣀⡠⠜⠁⢆⠀⠀⢤⠀⠀⡇⡇⡸
⠀⠀⠀⠘⢿⣿⣴⡞⢯⡁⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠋⠀⠧⣸⠀⠀⠀⠀⠀⠀⠐⠢⠽⠘⠦⣀⣀⣀⠔⠁⡇⠇
⠀⠀⠀⠀⠈⠛⢿⣿⣌⣷⡈⠉⠙⣿⣷⣤⠤⣀⣠⣤⣴⡊⠁⠀⠀⠀⠈⢇⠀⢀⣾⣿⣿⣭⣱⣦⡀⠀⠀⠀⠀⠀⣸⡞
⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⠀⠀⠈⠙⣿⣿⣦⣬⣽⣿⣶⣤⣤⣶⣤⣬⣧⡈⠛⠋⠉⠙⠻⣿⣷⠀⠀⠀⢀⡴⢙
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⣿⣶⡄⠀⠀⠈⠙⠻⣯⣍⡉⠙⣛⠛⠛⠛⢻⣿⣿⣶⢤⣀⠀⠀⠈⠁⢀⣀⠴⠚⠒⠋
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢷⣦⣀⣴⣦⠀⠉⠻⠿⠿⢿⡿⠷⠞⠛⠛⠋⣁⣀⣤⣭⣿⣿⣯⡿⠏
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⢿⣷⣶⣶⣤⣤⣶⣤⣶⣶⣴⣾⣿⣿⠿⠟⠛⠋⠉⠁\033[0m'
}

oops() {
  echo -e "\033[1;41mError:\033[0m \033[1;31m${*}\033[0m" >&2
  exit 1
}

warn() {
  echo -e "\033[1;42mWarning:\033[0m \033[1;32m${*}\033[0m" >&2
}

if [ "$1" == "build" ]; then
  prep

  [ -d build ] || mkdir build
  pushd build

  cmake ${ARGS} ..
  [ $? -ne 0 ] && oops "CMake failed"
  make
  [ $? -ne 0 ] && oops "Make failed"

  popd
  sudo ./out/gtests
  [ $? -eq 0 ] && pickle_rick || oops "GTests failed"

elif [ "$1" == "cross" ]; then
  prep

  [ -d build ] || mkdir build
  pushd build

  if [ $(uname -m) == "aarch64" ]; then
    if [ ! -d /opt/arm-gnu-toolchain-12.2.rel1-aarch64-arm-none-linux-gnueabihf ]; then
      curl -L /
      https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-aarch64-arm-none-linux-gnueabihf.tar.xz /
      -o /tmp/arm-gnu-toolchain-12.2.rel1-aarch64-arm-none-linux-gnueabihf.tar.xz

      [ $? -ne 0 ] && oops "Failure to get arm-linux-gnueabihf"

      sudo tar xf /tmp/arm-gnu-toolchain-12.2.rel1-aarch64-arm-none-linux-gnueabihf.tar.xz -C /opt/
      rm /tmp/arm-gnu-toolchain-12.2.rel1-aarch64-arm-none-linux-gnueabihf.tar.xz
    fi
    TOOLCHAIN='./toolchains/beaglebone_aarch64.cmake'

  elif [ $(uname -m) == "x86_64" ]; then
    if [ ! -d /opt/gcc-linaro-6.5.0-2018.12-x86_64_arm-linux-gnueabihf ]; then
      curl -L /
      https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-linux-gnueabihf.tar.xz
      -o /tmp/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-linux-gnueabihf.tar.xz

      [ $? -ne 0 ] && oops "Failure to get arm-linux-gnueabihf"

      sudo tar xf /tmp/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-linux-gnueabihf.tar.xz -C /opt/
      rm /tmp/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-linux-gnueabihf.tar.xz
    fi
    TOOLCHAIN='./toolchains/beaglebone.cmake'
  fi

  cmake ${ARGS} -DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN ..

  [ $? -ne 0 ] && oops "CMake failed"
  make
  [ $? -ne 0 ] && oops "Make failed" || pickle_rick

elif [ "$1" == "clean" ]; then
  rm -rf build
  rm -rf out
  rm -rf coverage
  echo "clean finished"

elif [ "$1" == "setup" ]; then
  sudo apt update
  sudo apt install \
    cmake \
    python3 \
    virtualenv \
    clang-format \
    cppcheck \
    i2c-tools \
    linux-modules-5.17.0-1003-oem

  virtualenv -p python3 $PYTHON_ENV
  $PYBIN/pip install pre-commit
  $PRE_COMMIT install

  git submodule update --init --recursive

  warn "Restart to install kernel"

elif [ "$1" == "lint" ]; then
  $PRE_COMMIT run -a

elif [ "$1" == "autocode" ]; then
  $PYTHON $ROOT_DIR/autocoding/autocode.py
else
  oops "Usage $0 {clean, build, cross, setup, lint, autocode}"
fi
