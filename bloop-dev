#!/bin/bash


ROOT_DIR=$(dirname $0)
PYTHON_ENV=$ROOT_DIR/.env
PYBIN=$PYTHON_ENV/bin
PRE_COMMIT=$PYBIN/pre-commit
PYTHON=$PYBIN/python
STUB_BUS=$(awk '{ if ($4 ~ /stub/) { print substr($1,5) }}' <(i2cdetect -l) 2> /dev/null)

#credit: https://emojicombos.com/rick-and-morty-ascii-art
pickle_rick() {
echo -e '\033[32m⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⡤⣠⣤⣴⡾⠛⠛⠛⠛⠛⠋⠙⠛⠛⠻⣿⣿⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠘⢟⠒⠒⠦⢴⡿⣿⠟⢳⠀⠉⠢⡦⣤⠶⠶⢿⣿⣿⣿⣶⣄⠀⠙⠟⠉⠛⢿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠈⢧⠀⠀⠀⠙⠳⣾⣿⠇⠀⠀⠘⣿⡄⡷⣶⣶⣤⣄⣭⣿⣷⣦⣀⠀⠀⠀⠻⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣸⠀⠀⠀⠀⠀⠈⠋⠀⠀⠀⠀⠘⡿⠁⢫⠉⠻⢿⣿⣉⠛⢿⣿⣦⣀⡀⠀⠛⢿⣷⣤⡀⠀⠀⠀⠀⠀
⢀⣠⠤⠤⠀⠠⠤⢴⣻⠀⠀⠀⢀⡠⠤⠒⠒⠒⠢⣄⠀⠁⠀⢸⠀⠀⠀⠀⠹⣷⡈⢻⣿⢿⣿⣦⣀⣀⢹⡝⢿⣦⡀⠀⠀⠀
⠀⠉⠓⢄⠀⠀⠀⠀⠀⠀⣠⠞⠁⣀⡠⠤⠐⠒⠒⠚⢷⡄⠀⢸⡀⣀⣠⣆⣀⣈⡉⠀⠙⣷⣍⠻⣿⣿⠀⠙⠈⠻⣿⣦⡀⠀
⠀⠀⠀⠀⣷⡄⠀⠀⠀⢰⠁⡴⢊⡡⠔⠒⠉⠉⠉⢉⡩⠼⣆⠀⠉⠀⢰⠙⢿⣿⣿⣄⠀⠻⣿⣷⡈⢻⣷⡀⢀⠀⢸⣿⣧⠀
⠀⠀⠀⢸⣿⣿⡀⠀⢠⡇⠈⠋⣡⠤⠀⠤⣄⠀⡴⠉⠀⠀⠀⠱⡄⢀⡏⠀⠸⡾⢿⣿⡇⠀⢸⣧⡁⠸⣯⠳⣿⠃⠀⣻⣿⠀
⠲⣦⠒⠛⠛⠋⠀⠀⢸⠁⠀⡜⠁⠀⡀⠀⠈⡦⡇⠀⠐⠋⠀⢀⣇⣼⣀⣴⠀⠀⢠⣿⡥⠄⠀⠛⠿⠦⢜⣧⠙⢦⠈⣿⣿⠀
⠀⠈⢳⣄⡀⠀⠀⠀⢸⡀⠀⡇⠀⠀⠃⠀⠀⡇⠑⢤⣀⣀⡤⣾⠀⠀⢀⠇⢀⠴⠊⠁⠀⣀⣀⣀⣀⠀⠀⠈⠑⢼⣀⣿⣿⡄
⠀⠀⠀⣿⣿⡶⠤⠀⠀⡇⠀⢘⠢⠤⠤⣴⠊⠀⡄⠹⡄⠒⠚⠹⠉⢦⠎⣰⠃⢀⠴⢚⣛⡓⠠⠄⠀⠈⠑⠢⢄⠀⠑⢿⣿⡇
⠀⠀⣸⣟⡁⠀⠀⠀⢠⢷⠀⠀⠉⠉⠉⠁⠀⠀⠘⠦⠇⠀⠀⠀⡧⠋⡴⠁⡴⢡⠞⠁⠀⠈⠳⡄⠀⠀⠀⠒⠤⣑⡄⠘⣿⠁
⠀⠀⢹⣷⣮⡙⠢⡄⢣⡈⡆⠀⠀⡄⣀⣠⡤⠄⠀⠠⠤⣀⢠⠐⡇⠐⡅⡜⠀⢸⠀⠀⠒⠀⠀⡅⢠⠖⠉⠉⠙⢮⠹⡀⢿⠀
⠀⠀⠈⣿⣿⡇⡴⠁⠀⣉⣻⣄⠀⠫⠹⠞⠁⠀⠀⠀⠀⠠⠋⢰⠃⡠⢻⠁⠀⠈⠳⠤⣀⡠⠜⠁⢆⠀⠀⢤⠀⠀⡇⡇⡸⠀
⠀⠀⠀⠘⢿⣿⣴⡞⢯⡁⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠋⠀⠧⣸⠀⠀⠀⠀⠀⠀⠐⠢⠽⠘⠦⣀⣀⣀⠔⠁⡇⠇⠀
⠀⠀⠀⠀⠈⠛⢿⣿⣌⣷⡈⠉⠙⣿⣷⣤⠤⣀⣠⣤⣴⡊⠁⠀⠀⠀⠈⢇⠀⢀⣾⣿⣿⣭⣱⣦⡀⠀⠀⠀⠀⠀⣸⡞⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⠀⠀⠈⠙⣿⣿⣦⣬⣽⣿⣶⣤⣤⣶⣤⣬⣧⡈⠛⠋⠉⠙⠻⣿⣷⠀⠀⠀⢀⡴⢙⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⣿⣶⡄⠀⠀⠈⠙⠻⣯⣍⡉⠙⣛⠛⠛⠛⢻⣿⣿⣶⢤⣀⠀⠀⠈⠁⢀⣀⠴⠚⠒⠋⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢷⣦⣀⣴⣦⠀⠉⠻⠿⠿⢿⡿⠷⠞⠛⠛⠋⣁⣀⣤⣭⣿⣿⣯⡿⠏⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⢿⣷⣶⣶⣤⣤⣶⣤⣶⣶⣴⣾⣿⣿⠿⠟⠛⠋⠉⠁         \033[0m' >&2
}

oops() {
    echo -e "\033[1;42mError:\033[0m \033[1;32m${*}\033[0m" >&2
    exit 1
}


if [ -z ${STUB_BUS} ]; then
  ARGS="-DCMAKE_EXPORT_COMPILE_COMMANDS=1"
else
  ARGS="-DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DSTUB_BUS=${STUB_BUS}"
fi

if [ "$1" == "build" ]; then
    ./btf/i2cinit.sh && ./btf/caninit.sh

    [ -d build ] || mkdir build
    pushd build

    cmake ${ARGS} ..

    [ $? -ne 0 ] && oops "CMake failed"

    make

    [ $? -ne 0 ] && oops "Make failed"

    popd
    sudo ./out/gtests
    [ $? -eq 0 ] && pickle_rick || oops "clean then try again"

elif [ "$1" == "cross" ]; then
    [ -d build ] || mkdir build
    pushd build

    if [ $(uname -m) == "aarch64" ]; then
        if [ ! -d /opt/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf ]; then
  	        wget -c \
              https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf.tar.xz \
              -P /tmp/

  	        [ $? -ne 0 ] && oops "Failure to get arm-linux-gnueabihf"

  	        sudo tar xf /tmp/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf.tar.xz -C /opt/
  	        rm /tmp/gcc-arm-10.3-2021.07-aarch64-arm-none-linux-gnueabihf.tar.xz
        fi
        TOOLCHAIN='./toolchains/beaglebone_aarch64.cmake'

    elif [ $(uname -m) == "x86_64" ]; then
        if [ ! -d /opt/gcc-linaro-6.5.0-2018.12-x86_64_arm-linux-gnueabihf ]; then
        	  wget -c \
              https://releases.linaro.org/components/toolchain/binaries/6.5-2018.12/arm-linux-gnueabihf/gcc-linaro-6.5.0-2018.12-x86_64_arm-linux-gnueabihf.tar.xz \
              -P /tmp/

        	  [ $? -ne 0 ] && oops "Failure to get arm-linux-gnueabihf"

        	  sudo tar xf /tmp/gcc-linaro-6.5.0-2018.12-x86_64_arm-linux-gnueabihf.tar.xz -C /opt/
        	  rm /tmp/gcc-linaro-6.5.0-2018.12-x86_64_arm-linux-gnueabihf.tar.xz
        fi
        TOOLCHAIN='./toolchains/beaglebone.cmake'
    fi

    cmake ${ARGS} -DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN ..

    [ $? -ne 0 ] && oops "CMake failed"

    make

    [ $? -ne 0 ] && oops "Make failed" || pickle_rick

elif [ "$1" == "clean" ]; then
	rm -rf build
	rm -rf out
	rm -rf coverage
	echo "clean finished"

elif [ "$1" == "setup" ]; then
    sudo apt update
    sudo apt install \
        python3 \
        virtualenv \
        clang-format \
        cppcheck \
        i2c-tools \
        linux-generic

    virtualenv -p python3 $PYTHON_ENV

    $PYBIN/pip install pre-commit

    $PRE_COMMIT install

    git submodule update --init --recursive


elif [ "$1" == "lint" ]; then
    $PRE_COMMIT run -a

elif [ "$1" == "autocode" ]; then
    $PYTHON $ROOT_DIR/autocoding/autocode.py
else
    oops "Usage $0 {clean, build, cross, setup, lint, autocode}"
fi
