#!/bin/bash

ROOT_DIR="$(cd "$(dirname "$0")" && pwd)"
PYTHON_ENV=$ROOT_DIR/.env
PYBIN=$PYTHON_ENV/bin
PRE_COMMIT=$PYBIN/pre-commit
PYTHON=$PYBIN/python
ARGS="-DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DBUILD_GMOCK=OFF"

#credit: https://emojicombos.com/rick-and-morty-ascii-art
pickle_rick() {
echo -e '\033[32m⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⡤⣠⣤⣴⡾⠛⠛⠛⠛⠛⠋⠙⠛⠛⠻⣿⣿⣶⣤⡀
⠀⠀⠀⠀⠀⠀⠘⢟⠒⠒⠦⢴⡿⣿⠟⢳⠀⠉⠢⡦⣤⠶⠶⢿⣿⣿⣿⣶⣄⠀⠙⠟⠉⠛⢿⣦⡀
⠀⠀⠀⠀⠀⠀⠀⠈⢧⠀⠀⠀⠙⠳⣾⣿⠇⠀⠀⠘⣿⡄⡷⣶⣶⣤⣄⣭⣿⣷⣦⣀⠀⠀⠀⠻⣿⣆
⠀⠀⠀⠀⠀⠀⠀⠀⣸⠀⠀⠀⠀⠀⠈⠋⠀⠀⠀⠀⠘⡿⠁⢫⠉⠻⢿⣿⣉⠛⢿⣿⣦⣀⡀⠀⠛⢿⣷⣤⡀
⢀⣠⠤⠤⠀⠠⠤⢴⣻⠀⠀⠀⢀⡠⠤⠒⠒⠒⠢⣄⠀⠁⠀⢸⠀⠀⠀⠀⠹⣷⡈⢻⣿⢿⣿⣦⣀⣀⢹⡝⢿⣦⡀
⠀⠉⠓⢄⠀⠀⠀⠀⠀⠀⣠⠞⠁⣀⡠⠤⠐⠒⠒⠚⢷⡄⠀⢸⡀⣀⣠⣆⣀⣈⡉⠀⠙⣷⣍⠻⣿⣿⠀⠙⠈⠻⣿⣦⡀
⠀⠀⠀⠀⣷⡄⠀⠀⠀⢰⠁⡴⢊⡡⠔⠒⠉⠉⠉⢉⡩⠼⣆⠀⠉⠀⢰⠙⢿⣿⣿⣄⠀⠻⣿⣷⡈⢻⣷⡀⢀⠀⢸⣿⣧
⠀⠀⠀⢸⣿⣿⡀⠀⢠⡇⠈⠋⣡⠤⠀⠤⣄⠀⡴⠉⠀⠀⠀⠱⡄⢀⡏⠀⠸⡾⢿⣿⡇⠀⢸⣧⡁⠸⣯⠳⣿⠃⠀⣻⣿
⠲⣦⠒⠛⠛⠋⠀⠀⢸⠁⠀⡜⠁⠀⡀⠀⠈⡦⡇⠀⠐⠋⠀⢀⣇⣼⣀⣴⠀⠀⢠⣿⡥⠄⠀⠛⠿⠦⢜⣧⠙⢦⠈⣿⣿
⠀⠈⢳⣄⡀⠀⠀⠀⢸⡀⠀⡇⠀⠀⠃⠀⠀⡇⠑⢤⣀⣀⡤⣾⠀⠀⢀⠇⢀⠴⠊⠁⠀⣀⣀⣀⣀⠀⠀⠈⠑⢼⣀⣿⣿⡄
⠀⠀⠀⣿⣿⡶⠤⠀⠀⡇⠀⢘⠢⠤⠤⣴⠊⠀⡄⠹⡄⠒⠚⠹⠉⢦⠎⣰⠃⢀⠴⢚⣛⡓⠠⠄⠀⠈⠑⠢⢄⠀⠑⢿⣿⡇
⠀⠀⣸⣟⡁⠀⠀⠀⢠⢷⠀⠀⠉⠉⠉⠁⠀⠀⠘⠦⠇⠀⠀⠀⡧⠋⡴⠁⡴⢡⠞⠁⠀⠈⠳⡄⠀⠀⠀⠒⠤⣑⡄⠘⣿⠁
⠀⠀⢹⣷⣮⡙⠢⡄⢣⡈⡆⠀⠀⡄⣀⣠⡤⠄⠀⠠⠤⣀⢠⠐⡇⠐⡅⡜⠀⢸⠀⠀⠒⠀⠀⡅⢠⠖⠉⠉⠙⢮⠹⡀⢿
⠀⠀⠈⣿⣿⡇⡴⠁⠀⣉⣻⣄⠀⠫⠹⠞⠁⠀⠀⠀⠀⠠⠋⢰⠃⡠⢻⠁⠀⠈⠳⠤⣀⡠⠜⠁⢆⠀⠀⢤⠀⠀⡇⡇⡸
⠀⠀⠀⠘⢿⣿⣴⡞⢯⡁⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠋⠀⠧⣸⠀⠀⠀⠀⠀⠀⠐⠢⠽⠘⠦⣀⣀⣀⠔⠁⡇⠇
⠀⠀⠀⠀⠈⠛⢿⣿⣌⣷⡈⠉⠙⣿⣷⣤⠤⣀⣠⣤⣴⡊⠁⠀⠀⠀⠈⢇⠀⢀⣾⣿⣿⣭⣱⣦⡀⠀⠀⠀⠀⠀⣸⡞
⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⠀⠀⠈⠙⣿⣿⣦⣬⣽⣿⣶⣤⣤⣶⣤⣬⣧⡈⠛⠋⠉⠙⠻⣿⣷⠀⠀⠀⢀⡴⢙
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⣿⣶⡄⠀⠀⠈⠙⠻⣯⣍⡉⠙⣛⠛⠛⠛⢻⣿⣿⣶⢤⣀⠀⠀⠈⠁⢀⣀⠴⠚⠒⠋
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢷⣦⣀⣴⣦⠀⠉⠻⠿⠿⢿⡿⠷⠞⠛⠛⠋⣁⣀⣤⣭⣿⣿⣯⡿⠏
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⢿⣷⣶⣶⣤⣤⣶⣤⣶⣶⣴⣾⣿⣿⠿⠟⠛⠋⠉⠁\033[0m'
}

oops() {
  echo -e "\033[1;41mError:\033[0m \033[1;31m${*}\033[0m" >&2
  exit 1
}

warn() {
  echo -e "\033[1;42mWarning:\033[0m \033[1;32m${*}\033[0m" >&2
}

if [ "$1" == "build" ]
then
  ./btf/i2cinit.sh && ./btf/caninit.sh && ./btf/gpioinit.sh 2> /dev/null # TODO write these bash scripts in C, so BBB can also do gtests
  STUB_BUS=$(i2cdetect -l | awk '{ if ($4 ~ /stub/) { print substr($1,5) }}' 2> /dev/null)
  [ -z ${STUB_BUS} ] || ARGS="$ARGS -DSTUB_BUS=${STUB_BUS}"
  [ -d build ] || mkdir build
  pushd build
  cmake $ARGS ..
  [ $? -ne 0 ] && oops "CMake failed"
  make
  [ $? -ne 0 ] && oops "Make failed"
  popd
  sudo ./out/gtests
  [ $? -eq 0 ] && pickle_rick || oops "GTests failed"
  ln -sf $ROOT_DIR/build/compile_commands.json $ROOT_DIR

elif [ "$1" == "cross" ]
then
  XC=arm-buildroot-linux-gnueabihf_sdk-buildroot
  if [ ! -d /opt/$XC ]
  then
    pushd $ROOT_DIR/third-party/buildroot
    make distclean
    make defconfig BR2_DEFCONFIG=$ROOT_DIR/third-party/br-external/configs/xc_config O=$ROOT_DIR/build/buildroot
    cd $ROOT_DIR/build/buildroot
    make sdk
    cp images/$XC.tar.gz /tmp/
    gzip -d /tmp/$XC.tar.gz
    sudo tar xvf /tmp/$XC.tar -C /opt/
    rm -f /tmp/$XC.tar
    popd
  fi
  [ -d build ] || mkdir build
  pushd build
  cmake $ARGS -DCMAKE_TOOLCHAIN_FILE=toolchains/beaglebone.cmake ..
  [ $? -ne 0 ] && oops "CMake failed"
  make
  [ $? -ne 0 ] && oops "Make failed" || pickle_rick

elif [ "$1" == "clean" ]
then
  rm -rf build
  rm -rf out
  rm -rf coverage
  echo "clean finished"

elif [ "$1" == "setup" ]
then
  sudo apt update -y
  sudo apt install -y \
    cmake \
    python3 \
    virtualenv \
    clang-format \
    cppcheck \
    i2c-tools

  virtualenv -p python3 $PYTHON_ENV
  $PYBIN/pip install pre-commit
  $PRE_COMMIT install

  git submodule update --init --recursive

  sudo apt install -y \
    linux-modules-extra-5.19.0-21-generic && \
    warn "Restart to install kernel modules" || \
    warn "Upgrade to kinetic (22.10) then run setup to install kernel modules"

elif [ "$1" == "lint" ]
then
  $PRE_COMMIT run -a

elif [ "$1" == "autocode" ]
then
  $PYTHON $ROOT_DIR/autocoding/autocode.py

elif [ "$1" == "br" ]
then
  pushd $ROOT_DIR/third-party/buildroot
  BUILD_DIR=$ROOT_DIR/build/buildroot

  read -r -p "Start a fresh buildroot project? [y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY]) # y, Y, yEs, YES, yES...
      $0 clean
      make defconfig BR2_DEFCONFIG=$ROOT_DIR/third-party/br-external/configs/beaglebone_config O=$BUILD_DIR
      ;;
    *)
      ;;
  esac

  [ -d $BUILD_DIR ] || oops "No buildroot project exists in build"
  cd $BUILD_DIR

  read -r -p "Change the Buildroot Configuration? [y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY])
      make menuconfig
      ;;
    *)
      ;;
  esac
  read -r -p "Change the Kernel Configuration? [y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY])
      make linux-menuconfig
      ;;
    *)
      ;;
  esac
  read -r -p "Make? [y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY])
      make sdk # also writes sdcard.img
      ;;
    *)
      ;;
  esac
  read -r -p "Copy to SD card? [y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY])
      read -r -p "Enter drive name: " response
      [ -e "$response" ] || oops "Invalid disk!"
      sudo dd if=$ROOT_DIR/build/buildroot/output/images/sdcard.img of=$response
      ;;
    *)
      ;;
  esac
  popd
else
  oops "Usage $0 {clean, build, cross, setup, lint, autocode, br}"
fi
